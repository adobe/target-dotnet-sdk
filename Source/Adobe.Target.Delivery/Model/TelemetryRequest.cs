// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Telemetry Request
    /// </summary>
    [DataContract(Name = "TelemetryRequest")]
    public partial class TelemetryRequest : IEquatable<TelemetryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TelemetryRequest" /> class.
        /// </summary>
        /// <param name="dns">DNS resolution time, in milliseconds elapsed since UNIX epoch..</param>
        /// <param name="tls">TLS handshake time, in milliseconds elapsed since UNIX epoch..</param>
        /// <param name="timeToFirstByte">Time to first byte, in milliseconds elapsed since UNIX epoch..</param>
        /// <param name="download">Download time, in milliseconds elapsed since UNIX epoch..</param>
        /// <param name="responseSize">Response size.</param>
        public TelemetryRequest(double? dns = default(double?), double? tls = default(double?), double? timeToFirstByte = default(double?), double? download = default(double?), long? responseSize = default(long?))
        {
            this.Dns = dns;
            this.Tls = tls;
            this.TimeToFirstByte = timeToFirstByte;
            this.Download = download;
            this.ResponseSize = responseSize;
        }

        /// <summary>
        /// DNS resolution time, in milliseconds elapsed since UNIX epoch.
        /// </summary>
        /// <value>DNS resolution time, in milliseconds elapsed since UNIX epoch.</value>
        [DataMember(Name = "dns", EmitDefaultValue = false)]
        public double? Dns { get; set; }

        /// <summary>
        /// TLS handshake time, in milliseconds elapsed since UNIX epoch.
        /// </summary>
        /// <value>TLS handshake time, in milliseconds elapsed since UNIX epoch.</value>
        [DataMember(Name = "tls", EmitDefaultValue = false)]
        public double? Tls { get; set; }

        /// <summary>
        /// Time to first byte, in milliseconds elapsed since UNIX epoch.
        /// </summary>
        /// <value>Time to first byte, in milliseconds elapsed since UNIX epoch.</value>
        [DataMember(Name = "timeToFirstByte", EmitDefaultValue = false)]
        public double? TimeToFirstByte { get; set; }

        /// <summary>
        /// Download time, in milliseconds elapsed since UNIX epoch.
        /// </summary>
        /// <value>Download time, in milliseconds elapsed since UNIX epoch.</value>
        [DataMember(Name = "download", EmitDefaultValue = false)]
        public double? Download { get; set; }

        /// <summary>
        /// Response size
        /// </summary>
        /// <value>Response size</value>
        [DataMember(Name = "responseSize", EmitDefaultValue = false)]
        public long? ResponseSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TelemetryRequest {\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("  TimeToFirstByte: ").Append(TimeToFirstByte).Append("\n");
            sb.Append("  Download: ").Append(Download).Append("\n");
            sb.Append("  ResponseSize: ").Append(ResponseSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TelemetryRequest);
        }

        /// <summary>
        /// Returns true if TelemetryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TelemetryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TelemetryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dns == input.Dns ||
                    this.Dns.Equals(input.Dns)
                ) && 
                (
                    this.Tls == input.Tls ||
                    this.Tls.Equals(input.Tls)
                ) && 
                (
                    this.TimeToFirstByte == input.TimeToFirstByte ||
                    this.TimeToFirstByte.Equals(input.TimeToFirstByte)
                ) && 
                (
                    this.Download == input.Download ||
                    this.Download.Equals(input.Download)
                ) && 
                (
                    this.ResponseSize == input.ResponseSize ||
                    this.ResponseSize.Equals(input.ResponseSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Dns.GetHashCode();
                hashCode = hashCode * 59 + this.Tls.GetHashCode();
                hashCode = hashCode * 59 + this.TimeToFirstByte.GetHashCode();
                hashCode = hashCode * 59 + this.Download.GetHashCode();
                hashCode = hashCode * 59 + this.ResponseSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
