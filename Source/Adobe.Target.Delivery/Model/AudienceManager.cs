// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Audience Manager Integration (AAM).
    /// </summary>
    [DataContract(Name = "AudienceManager")]
    public partial class AudienceManager : IEquatable<AudienceManager>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AudienceManager" /> class.
        /// </summary>
        /// <param name="locationHint">DCS location hint. Used to determine which AAM DCS Endpoint to hit in order to retrieve the profile. .</param>
        /// <param name="blob">AAM Blob. Used to send additional data to AAM. Validation   * Cannot be blank. .</param>
        public AudienceManager(int? locationHint = default(int?), string blob = default(string))
        {
            this.LocationHint = locationHint;
            this.Blob = blob;
        }

        /// <summary>
        /// DCS location hint. Used to determine which AAM DCS Endpoint to hit in order to retrieve the profile. 
        /// </summary>
        /// <value>DCS location hint. Used to determine which AAM DCS Endpoint to hit in order to retrieve the profile. </value>
        [DataMember(Name = "locationHint", EmitDefaultValue = false)]
        public int? LocationHint { get; set; }

        /// <summary>
        /// AAM Blob. Used to send additional data to AAM. Validation   * Cannot be blank. 
        /// </summary>
        /// <value>AAM Blob. Used to send additional data to AAM. Validation   * Cannot be blank. </value>
        [DataMember(Name = "blob", EmitDefaultValue = false)]
        public string Blob { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AudienceManager {\n");
            sb.Append("  LocationHint: ").Append(LocationHint).Append("\n");
            sb.Append("  Blob: ").Append(Blob).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AudienceManager);
        }

        /// <summary>
        /// Returns true if AudienceManager instances are equal
        /// </summary>
        /// <param name="input">Instance of AudienceManager to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AudienceManager input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationHint == input.LocationHint ||
                    this.LocationHint.Equals(input.LocationHint)
                ) && 
                (
                    this.Blob == input.Blob ||
                    (this.Blob != null &&
                    this.Blob.Equals(input.Blob))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.LocationHint.GetHashCode();
                if (this.Blob != null)
                    hashCode = hashCode * 59 + this.Blob.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LocationHint (int) minimum
            if(this.LocationHint < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LocationHint, must be a value greater than or equal to 1.", new [] { "LocationHint" });
            }

            // Blob (string) maxLength
            if(this.Blob != null && this.Blob.Length > 1024)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Blob, length must be less than 1024.", new [] { "Blob" });
            }

            // Blob (string) minLength
            if(this.Blob != null && this.Blob.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Blob, length must be greater than 1.", new [] { "Blob" });
            }

            yield break;
        }
    }

}
