// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Specifies the context for the request, IE if it a web request then is should include user agent etc.
    /// </summary>
    [DataContract(Name = "Context")]
    public partial class Context : IEquatable<Context>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Channel
        /// </summary>
        [DataMember(Name = "channel", IsRequired = true, EmitDefaultValue = false)]
        public ChannelType Channel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Context() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Context" /> class.
        /// </summary>
        /// <param name="channel">channel (required).</param>
        /// <param name="mobilePlatform">mobilePlatform.</param>
        /// <param name="application">application.</param>
        /// <param name="screen">screen.</param>
        /// <param name="window">window.</param>
        /// <param name="browser">browser.</param>
        /// <param name="address">address.</param>
        /// <param name="geo">geo.</param>
        /// <param name="timeOffsetInMinutes">Specifies minutes from UTC for specific client.</param>
        /// <param name="userAgent">User-Agent should be sent only via this property. HTTP header User-Agent is ignored..</param>
        /// <param name="clientHints">clientHints.</param>
        /// <param name="beacon">In case beacon &#x3D; true is provided in the request, the server will return a 204 No Content response with no response body.  (default to false).</param>
        public Context(ChannelType channel = default(ChannelType), MobilePlatform mobilePlatform = default(MobilePlatform), Application application = default(Application), Screen screen = default(Screen), Window window = default(Window), Browser browser = default(Browser), Address address = default(Address), Geo geo = default(Geo), double? timeOffsetInMinutes = default(double?), string userAgent = default(string), ClientHints clientHints = default(ClientHints), bool beacon = false)
        {
            this.Channel = channel;
            this.MobilePlatform = mobilePlatform;
            this.Application = application;
            this.Screen = screen;
            this.Window = window;
            this.Browser = browser;
            this.Address = address;
            this.Geo = geo;
            this.TimeOffsetInMinutes = timeOffsetInMinutes;
            this.UserAgent = userAgent;
            this.ClientHints = clientHints;
            this.Beacon = beacon;
        }

        /// <summary>
        /// Gets or Sets MobilePlatform
        /// </summary>
        [DataMember(Name = "mobilePlatform", EmitDefaultValue = false)]
        public MobilePlatform MobilePlatform { get; set; }

        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name = "application", EmitDefaultValue = false)]
        public Application Application { get; set; }

        /// <summary>
        /// Gets or Sets Screen
        /// </summary>
        [DataMember(Name = "screen", EmitDefaultValue = false)]
        public Screen Screen { get; set; }

        /// <summary>
        /// Gets or Sets Window
        /// </summary>
        [DataMember(Name = "window", EmitDefaultValue = false)]
        public Window Window { get; set; }

        /// <summary>
        /// Gets or Sets Browser
        /// </summary>
        [DataMember(Name = "browser", EmitDefaultValue = false)]
        public Browser Browser { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Geo
        /// </summary>
        [DataMember(Name = "geo", EmitDefaultValue = false)]
        public Geo Geo { get; set; }

        /// <summary>
        /// Specifies minutes from UTC for specific client
        /// </summary>
        /// <value>Specifies minutes from UTC for specific client</value>
        [DataMember(Name = "timeOffsetInMinutes", EmitDefaultValue = false)]
        public double? TimeOffsetInMinutes { get; set; }

        /// <summary>
        /// User-Agent should be sent only via this property. HTTP header User-Agent is ignored.
        /// </summary>
        /// <value>User-Agent should be sent only via this property. HTTP header User-Agent is ignored.</value>
        [DataMember(Name = "userAgent", EmitDefaultValue = false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets ClientHints
        /// </summary>
        [DataMember(Name = "clientHints", EmitDefaultValue = false)]
        public ClientHints ClientHints { get; set; }

        /// <summary>
        /// In case beacon &#x3D; true is provided in the request, the server will return a 204 No Content response with no response body. 
        /// </summary>
        /// <value>In case beacon &#x3D; true is provided in the request, the server will return a 204 No Content response with no response body. </value>
        [DataMember(Name = "beacon", EmitDefaultValue = true)]
        public bool Beacon { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Context {\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  MobilePlatform: ").Append(MobilePlatform).Append("\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  Window: ").Append(Window).Append("\n");
            sb.Append("  Browser: ").Append(Browser).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Geo: ").Append(Geo).Append("\n");
            sb.Append("  TimeOffsetInMinutes: ").Append(TimeOffsetInMinutes).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  ClientHints: ").Append(ClientHints).Append("\n");
            sb.Append("  Beacon: ").Append(Beacon).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Context);
        }

        /// <summary>
        /// Returns true if Context instances are equal
        /// </summary>
        /// <param name="input">Instance of Context to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Channel == input.Channel ||
                    this.Channel.Equals(input.Channel)
                ) && 
                (
                    this.MobilePlatform == input.MobilePlatform ||
                    (this.MobilePlatform != null &&
                    this.MobilePlatform.Equals(input.MobilePlatform))
                ) && 
                (
                    this.Application == input.Application ||
                    (this.Application != null &&
                    this.Application.Equals(input.Application))
                ) && 
                (
                    this.Screen == input.Screen ||
                    (this.Screen != null &&
                    this.Screen.Equals(input.Screen))
                ) && 
                (
                    this.Window == input.Window ||
                    (this.Window != null &&
                    this.Window.Equals(input.Window))
                ) && 
                (
                    this.Browser == input.Browser ||
                    (this.Browser != null &&
                    this.Browser.Equals(input.Browser))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Geo == input.Geo ||
                    (this.Geo != null &&
                    this.Geo.Equals(input.Geo))
                ) && 
                (
                    this.TimeOffsetInMinutes == input.TimeOffsetInMinutes ||
                    this.TimeOffsetInMinutes.Equals(input.TimeOffsetInMinutes)
                ) && 
                (
                    this.UserAgent == input.UserAgent ||
                    (this.UserAgent != null &&
                    this.UserAgent.Equals(input.UserAgent))
                ) && 
                (
                    this.ClientHints == input.ClientHints ||
                    (this.ClientHints != null &&
                    this.ClientHints.Equals(input.ClientHints))
                ) && 
                (
                    this.Beacon == input.Beacon ||
                    this.Beacon.Equals(input.Beacon)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.MobilePlatform != null)
                    hashCode = hashCode * 59 + this.MobilePlatform.GetHashCode();
                if (this.Application != null)
                    hashCode = hashCode * 59 + this.Application.GetHashCode();
                if (this.Screen != null)
                    hashCode = hashCode * 59 + this.Screen.GetHashCode();
                if (this.Window != null)
                    hashCode = hashCode * 59 + this.Window.GetHashCode();
                if (this.Browser != null)
                    hashCode = hashCode * 59 + this.Browser.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Geo != null)
                    hashCode = hashCode * 59 + this.Geo.GetHashCode();
                hashCode = hashCode * 59 + this.TimeOffsetInMinutes.GetHashCode();
                if (this.UserAgent != null)
                    hashCode = hashCode * 59 + this.UserAgent.GetHashCode();
                if (this.ClientHints != null)
                    hashCode = hashCode * 59 + this.ClientHints.GetHashCode();
                hashCode = hashCode * 59 + this.Beacon.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
