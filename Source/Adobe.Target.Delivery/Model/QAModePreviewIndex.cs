// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// QAModePreviewIndex
    /// </summary>
    [DataContract(Name = "QAModePreviewIndex")]
    public partial class QAModePreviewIndex : IEquatable<QAModePreviewIndex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QAModePreviewIndex" /> class.
        /// </summary>
        /// <param name="activityIndex">Index references the activity in the activity list (from the encrypted token). Validation   * If the activity list index is out of boundaries of the activities list in the token or if it is null it will  be ignored.   * Activity list index starts with 1.   * Should be at least one activity index, and should reference an activity specified in the token. .</param>
        /// <param name="experienceIndex">When specified, the experience with this index in the activity definition will be selected. Validation   * Can be null (unspecified)   * If index is not specified or out of bounds, the experience will be selected via activity experience selector strategy.   * Experience index starts with 1. .</param>
        public QAModePreviewIndex(int? activityIndex = default(int?), int? experienceIndex = default(int?))
        {
            this.ActivityIndex = activityIndex;
            this.ExperienceIndex = experienceIndex;
        }

        /// <summary>
        /// Index references the activity in the activity list (from the encrypted token). Validation   * If the activity list index is out of boundaries of the activities list in the token or if it is null it will  be ignored.   * Activity list index starts with 1.   * Should be at least one activity index, and should reference an activity specified in the token. 
        /// </summary>
        /// <value>Index references the activity in the activity list (from the encrypted token). Validation   * If the activity list index is out of boundaries of the activities list in the token or if it is null it will  be ignored.   * Activity list index starts with 1.   * Should be at least one activity index, and should reference an activity specified in the token. </value>
        [DataMember(Name = "activityIndex", EmitDefaultValue = false)]
        public int? ActivityIndex { get; set; }

        /// <summary>
        /// When specified, the experience with this index in the activity definition will be selected. Validation   * Can be null (unspecified)   * If index is not specified or out of bounds, the experience will be selected via activity experience selector strategy.   * Experience index starts with 1. 
        /// </summary>
        /// <value>When specified, the experience with this index in the activity definition will be selected. Validation   * Can be null (unspecified)   * If index is not specified or out of bounds, the experience will be selected via activity experience selector strategy.   * Experience index starts with 1. </value>
        [DataMember(Name = "experienceIndex", EmitDefaultValue = false)]
        public int? ExperienceIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QAModePreviewIndex {\n");
            sb.Append("  ActivityIndex: ").Append(ActivityIndex).Append("\n");
            sb.Append("  ExperienceIndex: ").Append(ExperienceIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QAModePreviewIndex);
        }

        /// <summary>
        /// Returns true if QAModePreviewIndex instances are equal
        /// </summary>
        /// <param name="input">Instance of QAModePreviewIndex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QAModePreviewIndex input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityIndex == input.ActivityIndex ||
                    this.ActivityIndex.Equals(input.ActivityIndex)
                ) && 
                (
                    this.ExperienceIndex == input.ExperienceIndex ||
                    this.ExperienceIndex.Equals(input.ExperienceIndex)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ActivityIndex.GetHashCode();
                hashCode = hashCode * 59 + this.ExperienceIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ActivityIndex (int) minimum
            if(this.ActivityIndex < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ActivityIndex, must be a value greater than or equal to 1.", new [] { "ActivityIndex" });
            }

            // ExperienceIndex (int) minimum
            if(this.ExperienceIndex < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExperienceIndex, must be a value greater than or equal to 1.", new [] { "ExperienceIndex" });
            }

            yield break;
        }
    }

}
