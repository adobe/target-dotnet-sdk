// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Use this object to enable the QA mode in the request. Use the QA mode to test the look and feel of your site or application for various activities in isolation or together, with the possibilty to match or not match specified audiences, select a specific experience, count the impressions/visits for the reporting or not. 
    /// </summary>
    [DataContract(Name = "QAMode")]
    public partial class QAMode : IEquatable<QAMode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QAMode" /> class.
        /// </summary>
        /// <param name="token">The encrypted token for the QA mode. It contains the list of the activity ids that are allowed to be executed in QA mode. Validation   * After decryption, the client code from the token should match the one from the request.   * After decryption, activities with the ids specified in the token should belong to the client. .</param>
        /// <param name="listedActivitiesOnly">Specifies whether qa_mode campaigns should be executed in isolation or if they should be evaluated along other active campaigns for current environment. .</param>
        /// <param name="evaluateAsTrueAudienceIds">List of audience ids that should be always evaluated as TRUE in the scope of the delivery request .</param>
        /// <param name="evaluateAsFalseAudienceIds">List of audience ids that should be always evaluated as FALSE in the scope of the delivery request .</param>
        /// <param name="previewIndexes">List of preview indexes. If present, the list cannot be empty. .</param>
        public QAMode(string token = default(string), bool listedActivitiesOnly = default(bool), List<long> evaluateAsTrueAudienceIds = default(List<long>), List<long> evaluateAsFalseAudienceIds = default(List<long>), List<QAModePreviewIndex> previewIndexes = default(List<QAModePreviewIndex>))
        {
            this.Token = token;
            this.ListedActivitiesOnly = listedActivitiesOnly;
            this.EvaluateAsTrueAudienceIds = evaluateAsTrueAudienceIds;
            this.EvaluateAsFalseAudienceIds = evaluateAsFalseAudienceIds;
            this.PreviewIndexes = previewIndexes;
        }

        /// <summary>
        /// The encrypted token for the QA mode. It contains the list of the activity ids that are allowed to be executed in QA mode. Validation   * After decryption, the client code from the token should match the one from the request.   * After decryption, activities with the ids specified in the token should belong to the client. 
        /// </summary>
        /// <value>The encrypted token for the QA mode. It contains the list of the activity ids that are allowed to be executed in QA mode. Validation   * After decryption, the client code from the token should match the one from the request.   * After decryption, activities with the ids specified in the token should belong to the client. </value>
        [DataMember(Name = "token", EmitDefaultValue = false)]
        public string Token { get; set; }

        /// <summary>
        /// Specifies whether qa_mode campaigns should be executed in isolation or if they should be evaluated along other active campaigns for current environment. 
        /// </summary>
        /// <value>Specifies whether qa_mode campaigns should be executed in isolation or if they should be evaluated along other active campaigns for current environment. </value>
        [DataMember(Name = "listedActivitiesOnly", EmitDefaultValue = true)]
        public bool ListedActivitiesOnly { get; set; }

        /// <summary>
        /// List of audience ids that should be always evaluated as TRUE in the scope of the delivery request 
        /// </summary>
        /// <value>List of audience ids that should be always evaluated as TRUE in the scope of the delivery request </value>
        [DataMember(Name = "evaluateAsTrueAudienceIds", EmitDefaultValue = false)]
        public List<long> EvaluateAsTrueAudienceIds { get; set; }

        /// <summary>
        /// List of audience ids that should be always evaluated as FALSE in the scope of the delivery request 
        /// </summary>
        /// <value>List of audience ids that should be always evaluated as FALSE in the scope of the delivery request </value>
        [DataMember(Name = "evaluateAsFalseAudienceIds", EmitDefaultValue = false)]
        public List<long> EvaluateAsFalseAudienceIds { get; set; }

        /// <summary>
        /// List of preview indexes. If present, the list cannot be empty. 
        /// </summary>
        /// <value>List of preview indexes. If present, the list cannot be empty. </value>
        [DataMember(Name = "previewIndexes", EmitDefaultValue = false)]
        public List<QAModePreviewIndex> PreviewIndexes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QAMode {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ListedActivitiesOnly: ").Append(ListedActivitiesOnly).Append("\n");
            sb.Append("  EvaluateAsTrueAudienceIds: ").Append(EvaluateAsTrueAudienceIds).Append("\n");
            sb.Append("  EvaluateAsFalseAudienceIds: ").Append(EvaluateAsFalseAudienceIds).Append("\n");
            sb.Append("  PreviewIndexes: ").Append(PreviewIndexes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QAMode);
        }

        /// <summary>
        /// Returns true if QAMode instances are equal
        /// </summary>
        /// <param name="input">Instance of QAMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QAMode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.ListedActivitiesOnly == input.ListedActivitiesOnly ||
                    this.ListedActivitiesOnly.Equals(input.ListedActivitiesOnly)
                ) && 
                (
                    this.EvaluateAsTrueAudienceIds == input.EvaluateAsTrueAudienceIds ||
                    this.EvaluateAsTrueAudienceIds != null &&
                    input.EvaluateAsTrueAudienceIds != null &&
                    this.EvaluateAsTrueAudienceIds.SequenceEqual(input.EvaluateAsTrueAudienceIds)
                ) && 
                (
                    this.EvaluateAsFalseAudienceIds == input.EvaluateAsFalseAudienceIds ||
                    this.EvaluateAsFalseAudienceIds != null &&
                    input.EvaluateAsFalseAudienceIds != null &&
                    this.EvaluateAsFalseAudienceIds.SequenceEqual(input.EvaluateAsFalseAudienceIds)
                ) && 
                (
                    this.PreviewIndexes == input.PreviewIndexes ||
                    this.PreviewIndexes != null &&
                    input.PreviewIndexes != null &&
                    this.PreviewIndexes.SequenceEqual(input.PreviewIndexes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                hashCode = hashCode * 59 + this.ListedActivitiesOnly.GetHashCode();
                if (this.EvaluateAsTrueAudienceIds != null)
                    hashCode = hashCode * 59 + this.EvaluateAsTrueAudienceIds.GetHashCode();
                if (this.EvaluateAsFalseAudienceIds != null)
                    hashCode = hashCode * 59 + this.EvaluateAsFalseAudienceIds.GetHashCode();
                if (this.PreviewIndexes != null)
                    hashCode = hashCode * 59 + this.PreviewIndexes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
