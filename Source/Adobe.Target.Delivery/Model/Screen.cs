// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// The properties that dictate a screen
    /// </summary>
    [DataContract(Name = "Screen")]
    public partial class Screen : IEquatable<Screen>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        public ScreenOrientationType? Orientation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Screen" /> class.
        /// </summary>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="colorDepth">color depth.</param>
        /// <param name="pixelRatio">Optional, Used for device detection using the device atlas.</param>
        /// <param name="orientation">orientation.</param>
        public Screen(double? width = default(double?), double? height = default(double?), double? colorDepth = default(double?), double? pixelRatio = default(double?), ScreenOrientationType? orientation = default(ScreenOrientationType?))
        {
            this.Width = width;
            this.Height = height;
            this.ColorDepth = colorDepth;
            this.PixelRatio = pixelRatio;
            this.Orientation = orientation;
        }

        /// <summary>
        /// width
        /// </summary>
        /// <value>width</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public double? Width { get; set; }

        /// <summary>
        /// height
        /// </summary>
        /// <value>height</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public double? Height { get; set; }

        /// <summary>
        /// color depth
        /// </summary>
        /// <value>color depth</value>
        [DataMember(Name = "colorDepth", EmitDefaultValue = false)]
        public double? ColorDepth { get; set; }

        /// <summary>
        /// Optional, Used for device detection using the device atlas
        /// </summary>
        /// <value>Optional, Used for device detection using the device atlas</value>
        [DataMember(Name = "pixelRatio", EmitDefaultValue = false)]
        public double? PixelRatio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Screen {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  ColorDepth: ").Append(ColorDepth).Append("\n");
            sb.Append("  PixelRatio: ").Append(PixelRatio).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Screen);
        }

        /// <summary>
        /// Returns true if Screen instances are equal
        /// </summary>
        /// <param name="input">Instance of Screen to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Screen input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.ColorDepth == input.ColorDepth ||
                    this.ColorDepth.Equals(input.ColorDepth)
                ) && 
                (
                    this.PixelRatio == input.PixelRatio ||
                    this.PixelRatio.Equals(input.PixelRatio)
                ) && 
                (
                    this.Orientation == input.Orientation ||
                    this.Orientation.Equals(input.Orientation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Width.GetHashCode();
                hashCode = hashCode * 59 + this.Height.GetHashCode();
                hashCode = hashCode * 59 + this.ColorDepth.GetHashCode();
                hashCode = hashCode * 59 + this.PixelRatio.GetHashCode();
                hashCode = hashCode * 59 + this.Orientation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
