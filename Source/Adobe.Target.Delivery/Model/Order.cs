// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Object that describes the order details.
    /// </summary>
    [DataContract(Name = "Order")]
    public partial class Order : IEquatable<Order>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="id">Order Id..</param>
        /// <param name="total">Order Total. The amount of money in the current order. .</param>
        /// <param name="purchasedProductIds">Order&#39;s product ids. Validation   * No blank values allowed.   * Each product Id max length 50.   * Product ids, separated by commas and concatenated, total length should not exceed 250. .</param>
        /// <param name="time">Time in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) format .</param>
        /// <param name="experienceLocalId">Id used to track the experience across POST/PUT requests.</param>
        /// <param name="duplicate">Whether or not the order is a duplicate.</param>
        /// <param name="outlier">Whether or not the order is abnormally different from the rest in volume.</param>
        public Order(string id = default(string), decimal? total = default(decimal?), List<string> purchasedProductIds = default(List<string>), DateTime time = default(DateTime), int? experienceLocalId = default(int?), bool duplicate = default(bool), bool outlier = default(bool))
        {
            this.Id = id;
            this.Total = total;
            this.PurchasedProductIds = purchasedProductIds;
            this.Time = time;
            this.ExperienceLocalId = experienceLocalId;
            this.Duplicate = duplicate;
            this.Outlier = outlier;
        }

        /// <summary>
        /// Order Id.
        /// </summary>
        /// <value>Order Id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Order Total. The amount of money in the current order. 
        /// </summary>
        /// <value>Order Total. The amount of money in the current order. </value>
        [DataMember(Name = "total", EmitDefaultValue = false)]
        public decimal? Total { get; set; }

        /// <summary>
        /// Order&#39;s product ids. Validation   * No blank values allowed.   * Each product Id max length 50.   * Product ids, separated by commas and concatenated, total length should not exceed 250. 
        /// </summary>
        /// <value>Order&#39;s product ids. Validation   * No blank values allowed.   * Each product Id max length 50.   * Product ids, separated by commas and concatenated, total length should not exceed 250. </value>
        [DataMember(Name = "purchasedProductIds", EmitDefaultValue = false)]
        public List<string> PurchasedProductIds { get; set; }

        /// <summary>
        /// Time in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) format 
        /// </summary>
        /// <value>Time in the [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals) format </value>
        [DataMember(Name = "time", EmitDefaultValue = false)]
        public DateTime Time { get; set; }

        /// <summary>
        /// Id used to track the experience across POST/PUT requests
        /// </summary>
        /// <value>Id used to track the experience across POST/PUT requests</value>
        [DataMember(Name = "experienceLocalId", EmitDefaultValue = false)]
        public int? ExperienceLocalId { get; set; }

        /// <summary>
        /// Whether or not the order is a duplicate
        /// </summary>
        /// <value>Whether or not the order is a duplicate</value>
        [DataMember(Name = "duplicate", EmitDefaultValue = true)]
        public bool Duplicate { get; set; }

        /// <summary>
        /// Whether or not the order is abnormally different from the rest in volume
        /// </summary>
        /// <value>Whether or not the order is abnormally different from the rest in volume</value>
        [DataMember(Name = "outlier", EmitDefaultValue = true)]
        public bool Outlier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  PurchasedProductIds: ").Append(PurchasedProductIds).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  ExperienceLocalId: ").Append(ExperienceLocalId).Append("\n");
            sb.Append("  Duplicate: ").Append(Duplicate).Append("\n");
            sb.Append("  Outlier: ").Append(Outlier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="input">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Total == input.Total ||
                    this.Total.Equals(input.Total)
                ) && 
                (
                    this.PurchasedProductIds == input.PurchasedProductIds ||
                    this.PurchasedProductIds != null &&
                    input.PurchasedProductIds != null &&
                    this.PurchasedProductIds.SequenceEqual(input.PurchasedProductIds)
                ) && 
                (
                    this.Time == input.Time ||
                    (true &&
                    this.Time.Equals(input.Time))
                ) && 
                (
                    this.ExperienceLocalId == input.ExperienceLocalId ||
                    this.ExperienceLocalId.Equals(input.ExperienceLocalId)
                ) && 
                (
                    this.Duplicate == input.Duplicate ||
                    this.Duplicate.Equals(input.Duplicate)
                ) && 
                (
                    this.Outlier == input.Outlier ||
                    this.Outlier.Equals(input.Outlier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.PurchasedProductIds != null)
                    hashCode = hashCode * 59 + this.PurchasedProductIds.GetHashCode();
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                hashCode = hashCode * 59 + this.ExperienceLocalId.GetHashCode();
                hashCode = hashCode * 59 + this.Duplicate.GetHashCode();
                hashCode = hashCode * 59 + this.Outlier.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Id (string) maxLength
            if(this.Id != null && this.Id.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Id, length must be less than 250.", new [] { "Id" });
            }

            // Total (decimal) minimum
            if(this.Total < (decimal)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Total, must be a value greater than or equal to 0.", new [] { "Total" });
            }

            // ExperienceLocalId (int) maximum
            if(this.ExperienceLocalId > (int)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExperienceLocalId, must be a value less than or equal to 2147483647.", new [] { "ExperienceLocalId" });
            }

            // ExperienceLocalId (int) minimum
            if(this.ExperienceLocalId < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExperienceLocalId, must be a value greater than or equal to 0.", new [] { "ExperienceLocalId" });
            }

            yield break;
        }
    }

}
