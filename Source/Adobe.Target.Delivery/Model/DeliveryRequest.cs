// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// DeliveryRequest
    /// </summary>
    [DataContract(Name = "DeliveryRequest")]
    public partial class DeliveryRequest : IEquatable<DeliveryRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryRequest" /> class.
        /// </summary>
        /// <param name="requestId">The request ID that will be returned in the response. In case it is not provided, an UUID is generated and returned automatically. .</param>
        /// <param name="impressionId">If not present it will be automatically generated (UUID). If present,  second and subsequent requests with the same id will not increment impressions to activities/metrics. Similar to page id. .</param>
        /// <param name="id">id.</param>
        /// <param name="environmentId">Valid client environment id. If not specified host will be determined base on the provided host..</param>
        /// <param name="property">property.</param>
        /// <param name="trace">trace.</param>
        /// <param name="context">context (required).</param>
        /// <param name="experienceCloud">experienceCloud.</param>
        /// <param name="execute">execute.</param>
        /// <param name="prefetch">prefetch.</param>
        /// <param name="telemetry">telemetry.</param>
        /// <param name="notifications">Notifications for the displayed content, clicked selectors, and/or visited views or mboxes..</param>
        /// <param name="qaMode">qaMode.</param>
        /// <param name="preview">preview.</param>
        public DeliveryRequest(string requestId = default(string), string impressionId = default(string), VisitorId id = default(VisitorId), long? environmentId = default(long?), Property property = default(Property), Trace trace = default(Trace), Context context = default(Context), ExperienceCloud experienceCloud = default(ExperienceCloud), ExecuteRequest execute = default(ExecuteRequest), PrefetchRequest prefetch = default(PrefetchRequest), Telemetry telemetry = default(Telemetry), List<Notification> notifications = default(List<Notification>), QAMode qaMode = default(QAMode), Preview preview = default(Preview))
        {
            // to ensure "context" is required (not null)
            this.Context = context ?? throw new ArgumentNullException("context is a required property for DeliveryRequest and cannot be null");
            this.RequestId = requestId;
            this.ImpressionId = impressionId;
            this.Id = id;
            this.EnvironmentId = environmentId;
            this.Property = property;
            this.Trace = trace;
            this.ExperienceCloud = experienceCloud;
            this.Execute = execute;
            this.Prefetch = prefetch;
            this.Telemetry = telemetry;
            this.Notifications = notifications;
            this.QaMode = qaMode;
            this.Preview = preview;
        }

        /// <summary>
        /// The request ID that will be returned in the response. In case it is not provided, an UUID is generated and returned automatically. 
        /// </summary>
        /// <value>The request ID that will be returned in the response. In case it is not provided, an UUID is generated and returned automatically. </value>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// If not present it will be automatically generated (UUID). If present,  second and subsequent requests with the same id will not increment impressions to activities/metrics. Similar to page id. 
        /// </summary>
        /// <value>If not present it will be automatically generated (UUID). If present,  second and subsequent requests with the same id will not increment impressions to activities/metrics. Similar to page id. </value>
        [DataMember(Name = "impressionId", EmitDefaultValue = false)]
        public string ImpressionId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public VisitorId Id { get; set; }

        /// <summary>
        /// Valid client environment id. If not specified host will be determined base on the provided host.
        /// </summary>
        /// <value>Valid client environment id. If not specified host will be determined base on the provided host.</value>
        [DataMember(Name = "environmentId", EmitDefaultValue = false)]
        public long? EnvironmentId { get; set; }

        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name = "property", EmitDefaultValue = false)]
        public Property Property { get; set; }

        /// <summary>
        /// Gets or Sets Trace
        /// </summary>
        [DataMember(Name = "trace", EmitDefaultValue = false)]
        public Trace Trace { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name = "context", IsRequired = true, EmitDefaultValue = false)]
        public Context Context { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceCloud
        /// </summary>
        [DataMember(Name = "experienceCloud", EmitDefaultValue = false)]
        public ExperienceCloud ExperienceCloud { get; set; }

        /// <summary>
        /// Gets or Sets Execute
        /// </summary>
        [DataMember(Name = "execute", EmitDefaultValue = false)]
        public ExecuteRequest Execute { get; set; }

        /// <summary>
        /// Gets or Sets Prefetch
        /// </summary>
        [DataMember(Name = "prefetch", EmitDefaultValue = false)]
        public PrefetchRequest Prefetch { get; set; }

        /// <summary>
        /// Gets or Sets Telemetry
        /// </summary>
        [DataMember(Name = "telemetry", EmitDefaultValue = false)]
        public Telemetry Telemetry { get; set; }

        /// <summary>
        /// Notifications for the displayed content, clicked selectors, and/or visited views or mboxes.
        /// </summary>
        /// <value>Notifications for the displayed content, clicked selectors, and/or visited views or mboxes.</value>
        [DataMember(Name = "notifications", EmitDefaultValue = false)]
        public List<Notification> Notifications { get; set; }

        /// <summary>
        /// Gets or Sets QaMode
        /// </summary>
        [DataMember(Name = "qaMode", EmitDefaultValue = false)]
        public QAMode QaMode { get; set; }

        /// <summary>
        /// Gets or Sets Preview
        /// </summary>
        [DataMember(Name = "preview", EmitDefaultValue = false)]
        public Preview Preview { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryRequest {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  ImpressionId: ").Append(ImpressionId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ExperienceCloud: ").Append(ExperienceCloud).Append("\n");
            sb.Append("  Execute: ").Append(Execute).Append("\n");
            sb.Append("  Prefetch: ").Append(Prefetch).Append("\n");
            sb.Append("  Telemetry: ").Append(Telemetry).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  QaMode: ").Append(QaMode).Append("\n");
            sb.Append("  Preview: ").Append(Preview).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryRequest);
        }

        /// <summary>
        /// Returns true if DeliveryRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) && 
                (
                    this.ImpressionId == input.ImpressionId ||
                    (this.ImpressionId != null &&
                    this.ImpressionId.Equals(input.ImpressionId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    this.EnvironmentId.Equals(input.EnvironmentId)
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Trace == input.Trace ||
                    (this.Trace != null &&
                    this.Trace.Equals(input.Trace))
                ) && 
                (
                    this.Context == input.Context ||
                    (this.Context != null &&
                    this.Context.Equals(input.Context))
                ) && 
                (
                    this.ExperienceCloud == input.ExperienceCloud ||
                    (this.ExperienceCloud != null &&
                    this.ExperienceCloud.Equals(input.ExperienceCloud))
                ) && 
                (
                    this.Execute == input.Execute ||
                    (this.Execute != null &&
                    this.Execute.Equals(input.Execute))
                ) && 
                (
                    this.Prefetch == input.Prefetch ||
                    (this.Prefetch != null &&
                    this.Prefetch.Equals(input.Prefetch))
                ) && 
                (
                    this.Telemetry == input.Telemetry ||
                    (this.Telemetry != null &&
                    this.Telemetry.Equals(input.Telemetry))
                ) && 
                (
                    this.Notifications == input.Notifications ||
                    this.Notifications != null &&
                    input.Notifications != null &&
                    this.Notifications.SequenceEqual(input.Notifications)
                ) && 
                (
                    this.QaMode == input.QaMode ||
                    (this.QaMode != null &&
                    this.QaMode.Equals(input.QaMode))
                ) && 
                (
                    this.Preview == input.Preview ||
                    (this.Preview != null &&
                    this.Preview.Equals(input.Preview))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.ImpressionId != null)
                    hashCode = hashCode * 59 + this.ImpressionId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                if (this.Property != null)
                    hashCode = hashCode * 59 + this.Property.GetHashCode();
                if (this.Trace != null)
                    hashCode = hashCode * 59 + this.Trace.GetHashCode();
                if (this.Context != null)
                    hashCode = hashCode * 59 + this.Context.GetHashCode();
                if (this.ExperienceCloud != null)
                    hashCode = hashCode * 59 + this.ExperienceCloud.GetHashCode();
                if (this.Execute != null)
                    hashCode = hashCode * 59 + this.Execute.GetHashCode();
                if (this.Prefetch != null)
                    hashCode = hashCode * 59 + this.Prefetch.GetHashCode();
                if (this.Telemetry != null)
                    hashCode = hashCode * 59 + this.Telemetry.GetHashCode();
                if (this.Notifications != null)
                    hashCode = hashCode * 59 + this.Notifications.GetHashCode();
                if (this.QaMode != null)
                    hashCode = hashCode * 59 + this.QaMode.GetHashCode();
                if (this.Preview != null)
                    hashCode = hashCode * 59 + this.Preview.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RequestId (string) maxLength
            if(this.RequestId != null && this.RequestId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RequestId, length must be less than 128.", new [] { "RequestId" });
            }

            // ImpressionId (string) maxLength
            if(this.ImpressionId != null && this.ImpressionId.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ImpressionId, length must be less than 128.", new [] { "ImpressionId" });
            }

            yield break;
        }
    }

}
