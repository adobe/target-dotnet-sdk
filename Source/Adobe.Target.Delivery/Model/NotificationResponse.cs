// <auto-generated/>
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Adobe.Target.Delivery.Client.OpenAPIDateConverter;

namespace Adobe.Target.Delivery.Model
{
    /// <summary>
    /// Notification response. Contains the result of a processed notification. 
    /// </summary>
    [DataContract(Name = "NotificationResponse")]
    public partial class NotificationResponse : IEquatable<NotificationResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationResponse" /> class.
        /// </summary>
        /// <param name="id">Notification id which indicates that the notification was processed successfully. .</param>
        /// <param name="trace">The object containing all trace data for the request, only present if the trace token was provided in the request. .</param>
        public NotificationResponse(string id = default(string), Dictionary<string, Object> trace = default(Dictionary<string, Object>))
        {
            this.Id = id;
            this.Trace = trace;
        }

        /// <summary>
        /// Notification id which indicates that the notification was processed successfully. 
        /// </summary>
        /// <value>Notification id which indicates that the notification was processed successfully. </value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The object containing all trace data for the request, only present if the trace token was provided in the request. 
        /// </summary>
        /// <value>The object containing all trace data for the request, only present if the trace token was provided in the request. </value>
        [DataMember(Name = "trace", EmitDefaultValue = false)]
        public Dictionary<string, Object> Trace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotificationResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NotificationResponse);
        }

        /// <summary>
        /// Returns true if NotificationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NotificationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotificationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Trace == input.Trace ||
                    this.Trace != null &&
                    input.Trace != null &&
                    this.Trace.SequenceEqual(input.Trace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Trace != null)
                    hashCode = hashCode * 59 + this.Trace.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
